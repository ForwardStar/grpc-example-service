// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: service/protoservices.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/protoservices.proto",
}

// ETCDWrapperClient is the client API for ETCDWrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ETCDWrapperClient interface {
	SetKV(ctx context.Context, in *SetKVRequest, opts ...grpc.CallOption) (*SetKVResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error)
	ListValues(ctx context.Context, in *ListValuesRequest, opts ...grpc.CallOption) (*ListValuesResponse, error)
}

type eTCDWrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewETCDWrapperClient(cc grpc.ClientConnInterface) ETCDWrapperClient {
	return &eTCDWrapperClient{cc}
}

func (c *eTCDWrapperClient) SetKV(ctx context.Context, in *SetKVRequest, opts ...grpc.CallOption) (*SetKVResponse, error) {
	out := new(SetKVResponse)
	err := c.cc.Invoke(ctx, "/service.ETCDWrapper/SetKV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCDWrapperClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/service.ETCDWrapper/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCDWrapperClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*DeleteKeyResponse, error) {
	out := new(DeleteKeyResponse)
	err := c.cc.Invoke(ctx, "/service.ETCDWrapper/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCDWrapperClient) ListValues(ctx context.Context, in *ListValuesRequest, opts ...grpc.CallOption) (*ListValuesResponse, error) {
	out := new(ListValuesResponse)
	err := c.cc.Invoke(ctx, "/service.ETCDWrapper/ListValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ETCDWrapperServer is the server API for ETCDWrapper service.
// All implementations must embed UnimplementedETCDWrapperServer
// for forward compatibility
type ETCDWrapperServer interface {
	SetKV(context.Context, *SetKVRequest) (*SetKVResponse, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error)
	ListValues(context.Context, *ListValuesRequest) (*ListValuesResponse, error)
	mustEmbedUnimplementedETCDWrapperServer()
}

// UnimplementedETCDWrapperServer must be embedded to have forward compatible implementations.
type UnimplementedETCDWrapperServer struct {
}

func (UnimplementedETCDWrapperServer) SetKV(context.Context, *SetKVRequest) (*SetKVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKV not implemented")
}
func (UnimplementedETCDWrapperServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedETCDWrapperServer) DeleteKey(context.Context, *DeleteKeyRequest) (*DeleteKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedETCDWrapperServer) ListValues(context.Context, *ListValuesRequest) (*ListValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValues not implemented")
}
func (UnimplementedETCDWrapperServer) mustEmbedUnimplementedETCDWrapperServer() {}

// UnsafeETCDWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ETCDWrapperServer will
// result in compilation errors.
type UnsafeETCDWrapperServer interface {
	mustEmbedUnimplementedETCDWrapperServer()
}

func RegisterETCDWrapperServer(s grpc.ServiceRegistrar, srv ETCDWrapperServer) {
	s.RegisterService(&ETCDWrapper_ServiceDesc, srv)
}

func _ETCDWrapper_SetKV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCDWrapperServer).SetKV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ETCDWrapper/SetKV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCDWrapperServer).SetKV(ctx, req.(*SetKVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCDWrapper_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCDWrapperServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ETCDWrapper/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCDWrapperServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCDWrapper_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCDWrapperServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ETCDWrapper/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCDWrapperServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCDWrapper_ListValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCDWrapperServer).ListValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ETCDWrapper/ListValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCDWrapperServer).ListValues(ctx, req.(*ListValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ETCDWrapper_ServiceDesc is the grpc.ServiceDesc for ETCDWrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ETCDWrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ETCDWrapper",
	HandlerType: (*ETCDWrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKV",
			Handler:    _ETCDWrapper_SetKV_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _ETCDWrapper_GetKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _ETCDWrapper_DeleteKey_Handler,
		},
		{
			MethodName: "ListValues",
			Handler:    _ETCDWrapper_ListValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/protoservices.proto",
}
